#!/usr/bin/env python3
"""
Eyes: Fetches your IP's lat/lng and saves a Mapbox wallpaper.png

- Requires MAPBOX_KEY in environment
- Uses feh for wallpapering
- Dependencies: requests, geocoder, numpy, Pillow, cv2

Usage:
    eyes /path/to/save.png
    eyes --wallpaper
"""

from PIL import Image, ImageChops
from dataclasses import dataclass
from io import BytesIO
from pathlib import Path
import argparse
import cv2
import datetime
import geocoder
import numpy as np
import os
import random
import requests
import subprocess

API_KEY = os.getenv("MAPBOX_KEY")

DEFAULTS = {
    'ZOOM': 15,
    'SIZE': (1280, 850),
    'FONT_SIZE': 24,
    'FONT_PATH': "/usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf",
}

WALLPAPER_DIR = Path.home() / ".cache" / "eyes"
BACKGROUND_FILE = Path.home() / ".feh-backgrounds"


@dataclass
class Config:
    path: Path
    factor: float = 0.1
    zoom: int = DEFAULTS['ZOOM']
    dry_run: bool = False
    transformation: str = 'default'
    region: str | None = None
    wallpaper: bool = False


def resize_image(img, size=(1280, 800)):
    return img.resize(size, Image.Resampling.LANCZOS)


def convert_to_monochrome(img):
    return img.convert("L").convert("RGB")


def add_noise(img, location=0.0, scale=35):
    arr = np.asarray(img)
    noise = np.random.normal(location, scale, arr.shape)
    noisy_arr = np.clip(arr + noise, 0, 255)
    return Image.fromarray(noisy_arr.astype(np.uint8))


def glitch_effect(img):
    img = img.convert("RGBA")
    r, g, b, a = img.split()
    r = ImageChops.offset(r, 5, 0)
    g = ImageChops.offset(g, -5, 0)
    return Image.merge("RGBA", (r, g, b, a)).convert("RGB")


def hellzone(img):
    red = Image.new("RGB", img.size, (255, 0, 0))
    return Image.blend(img, red, 0.5)


def watercolor_effect(img):
    with subprocess.Popen(
        ["watercolor", "-s", "5", "-e", "5", "-m", "50", "-c", "5"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE) as proc:
        img_bytes = BytesIO()
        img.save(img_bytes, format='PNG')
        if not proc.stdin or not proc.stdout:
            return img
        proc.stdin.write(img_bytes.getvalue())
        proc.stdin.close()
        output = proc.stdout.read()
    return Image.open(BytesIO(output)) if output else img


def noisy_blob(img, num=100, min_r=20, max_r=80, dilate=3, blur=5):
    img_arr = np.asarray(img)
    mono_arr = np.asarray(convert_to_monochrome(img))
    mask = np.zeros((img.height, img.width), dtype=np.uint8)
    for _ in range(num):
        x, y, r = random.randint(0, img.width - 1), random.randint(
            0, img.height - 1), random.randint(min_r, max_r)
        cv2.circle(mask, (x, y), r, (255, 255, 255), -1)
    kernel = np.ones((5, 5), np.uint8)
    dilated = cv2.dilate(mask, kernel, iterations=dilate)
    blurred = cv2.GaussianBlur(dilated, (blur, blur), 0)
    masked = np.where(blurred[..., None], img_arr, mono_arr)
    return Image.fromarray(masked.astype(np.uint8))


def crop_bottom(img, pixels):
    width, height = img.size
    return img.crop((0, 0, width, height - pixels))


class Effect:

    def apply(self, img):
        return img


class ResizeEffect(Effect):

    def __init__(self, size=(1280, 800)):
        self.size = size

    def apply(self, img):
        return resize_image(img, self.size)


class CropBottomEffect(Effect):

    def __init__(self, pixels):
        self.pixels = pixels

    def apply(self, img):
        return crop_bottom(img, self.pixels)


class MonochromeEffect(Effect):

    def apply(self, img):
        return convert_to_monochrome(img)


class NoisyBlobEffect(Effect):

    def apply(self, img):
        return noisy_blob(img)


class AddNoiseEffect(Effect):

    def __init__(self, scale=10):
        self.scale = scale

    def apply(self, img):
        return add_noise(img, scale=self.scale)


class GlitchEffect(Effect):

    def apply(self, img):
        return glitch_effect(img)


class HellzoneEffect(Effect):

    def apply(self, img):
        return hellzone(img)


class WatercolorEffect(Effect):

    def apply(self, img):
        return watercolor_effect(img)


TRANSFORMATIONS = {
    "default": [
        ResizeEffect(),
        CropBottomEffect(50),
        MonochromeEffect(),
        NoisyBlobEffect(),
        AddNoiseEffect(scale=10),
    ],
    "simple_noise": [
        ResizeEffect(),
        CropBottomEffect(50),
        AddNoiseEffect(scale=20),
    ],
    "glitch": [
        ResizeEffect(),
        CropBottomEffect(50),
        GlitchEffect(),
    ],
    "red_overlay": [
        ResizeEffect(),
        CropBottomEffect(50),
        HellzoneEffect(),
    ],
    "watercolor": [
        ResizeEffect(),
        CropBottomEffect(50),
        WatercolorEffect(),
    ],
}


class ImageProcessor:

    def __init__(self, transformation_set):
        self.transformations = TRANSFORMATIONS[transformation_set]

    def process(self, img):
        for effect in self.transformations:
            img = effect.apply(img)
        return img


def archive(img, path):
    WALLPAPER_DIR.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
    backup_path = WALLPAPER_DIR / f"{timestamp}-{path.name}"
    img.save(backup_path)


def get_public_ip():
    return requests.get("https://ident.me").text.strip()


def get_location(ip):
    g = geocoder.ip(ip)
    return g.latlng


def get_map_image(lat, lng, zoom=DEFAULTS['ZOOM'], size=DEFAULTS['SIZE']):
    root_url = "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static"
    url = f"{root_url}/{lng},{lat},{zoom}/{size[0]}x{size[1]}?access_token={API_KEY}"
    response = requests.get(url)
    if response.ok:
        return Image.open(BytesIO(response.content))
    else:
        raise ValueError(
            f"Map request failed with status {response.status_code}")


def get_region_coords(region_name):
    headers = {'User-Agent': 'Mozilla/5.0'}
    g = geocoder.osm(region_name, headers=headers)
    return g.latlng if g.ok else None


def randomize_axis(coords, factor=0.1):
    lat, lng = coords
    lat += random.uniform(-factor, factor)
    lng += random.uniform(-factor, factor)
    lat = max(min(lat, 90), -90)
    lng = max(min(lng, 180), -180)
    return round(lat, 4), round(lng, 4)


def set_wallpaper(path):
    if BACKGROUND_FILE.is_file():
        with BACKGROUND_FILE.open('r+') as file:
            lines = file.readlines()
            if lines:
                lines[-1] = f"# {lines[-1]}"
            file.seek(0)
            file.writelines(lines)
    subprocess.run(["feh", "--bg-scale", str(path)])
    with BACKGROUND_FILE.open('a') as file:
        file.write(f"feh --bg-scale {path}\n")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("path",
                        nargs="?",
                        default="wallpaper.png",
                        help="Save path")
    parser.add_argument("-f",
                        "--factor",
                        type=float,
                        default=0.1,
                        help="Random coordinate adjustment factor")
    parser.add_argument("-w",
                        "--wallpaper",
                        action="store_true",
                        help="Set as wallpaper")
    parser.add_argument("-z",
                        "--zoom",
                        type=int,
                        default=DEFAULTS['ZOOM'],
                        help="Map zoom level")
    parser.add_argument("-d", "--dry", action="store_true", help="Dry run")
    parser.add_argument("-t",
                        "--transformation",
                        choices=TRANSFORMATIONS.keys(),
                        default="default",
                        help="Transformation set")
    parser.add_argument("-r",
                        "--region",
                        help='Specify region, e.g., "McComb Ohio"',
                        default="Traverse City Michigan")
    args = parser.parse_args()

    config = Config(
        path=Path(args.path),
        factor=args.factor,
        zoom=args.zoom,
        dry_run=args.dry,
        transformation=args.transformation,
        region=args.region,
        wallpaper=args.wallpaper,
    )

    ip = None
    if config.region:
        coords = get_region_coords(config.region)
        if not coords:
            print(f"Could not find coordinates for {config.region}")
            exit(1)
    else:
        ip = get_public_ip()
        coords = get_location(ip)
        if not coords:
            print("Location not found")
            exit(1)

    lat, lng = randomize_axis(coords, factor=config.factor)

    if config.dry_run:
        print(
            f"IP: {ip}, Original Coords: {coords}, Adjusted Coords: {(lat, lng)}"
        )
        exit()

    img = get_map_image(lat, lng, zoom=config.zoom)
    processor = ImageProcessor(config.transformation)
    final_img = processor.process(img)
    archive(final_img, config.path)
    final_img.save(str(config.path))

    if config.wallpaper:
        set_wallpaper(config.path)

    print(f"Saved to {config.path}")


if __name__ == "__main__":
    main()
